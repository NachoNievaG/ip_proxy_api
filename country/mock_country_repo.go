// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package country is a generated GoMock package.
package country

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCountryRepository is a mock of CountryRepository interface.
type MockCountryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCountryRepositoryMockRecorder
}

// MockCountryRepositoryMockRecorder is the mock recorder for MockCountryRepository.
type MockCountryRepositoryMockRecorder struct {
	mock *MockCountryRepository
}

// NewMockCountryRepository creates a new mock instance.
func NewMockCountryRepository(ctrl *gomock.Controller) *MockCountryRepository {
	mock := &MockCountryRepository{ctrl: ctrl}
	mock.recorder = &MockCountryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCountryRepository) EXPECT() *MockCountryRepositoryMockRecorder {
	return m.recorder
}

// CountIPs mocks base method.
func (m *MockCountryRepository) CountIPs(ctx context.Context, countryCode string) (IPCount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountIPs", ctx, countryCode)
	ret0, _ := ret[0].(IPCount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountIPs indicates an expected call of CountIPs.
func (mr *MockCountryRepositoryMockRecorder) CountIPs(ctx, countryCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountIPs", reflect.TypeOf((*MockCountryRepository)(nil).CountIPs), ctx, countryCode)
}

// GetIP mocks base method.
func (m *MockCountryRepository) GetIP(ctx context.Context, ip uint32) (IPModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIP", ctx, ip)
	ret0, _ := ret[0].(IPModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIP indicates an expected call of GetIP.
func (mr *MockCountryRepositoryMockRecorder) GetIP(ctx, ip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIP", reflect.TypeOf((*MockCountryRepository)(nil).GetIP), ctx, ip)
}

// TopISPByCountryCode mocks base method.
func (m *MockCountryRepository) TopISPByCountryCode(ctx context.Context, countryCode string) ([]ISPCount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TopISPByCountryCode", ctx, countryCode)
	ret0, _ := ret[0].([]ISPCount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TopISPByCountryCode indicates an expected call of TopISPByCountryCode.
func (mr *MockCountryRepositoryMockRecorder) TopISPByCountryCode(ctx, countryCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TopISPByCountryCode", reflect.TypeOf((*MockCountryRepository)(nil).TopISPByCountryCode), ctx, countryCode)
}
